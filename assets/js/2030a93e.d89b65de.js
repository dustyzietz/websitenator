"use strict";(self.webpackChunkwebsitenator=self.webpackChunkwebsitenator||[]).push([[9454],{5497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"templates/csharp-postgres-quick-start","title":"\u26a1 Template 3 \u2013 Vite + React + C# FastEndpoints + PostgreSQL","description":"FastEndpoints + PostgreSQL","source":"@site/docs/templates/csharp-postgres-quick-start.md","sourceDirName":"templates","slug":"/templates/csharp-postgres-quick-start","permalink":"/docs/templates/csharp-postgres-quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/templates/csharp-postgres-quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Web Designer","permalink":"/docs/bots/web-designer"},"next":{"title":"\ud83d\ude80 Hanalei App \u2013 Fullstack Setup with Mongoose, React Query, shadcn/ui, and TanStack Table","permalink":"/docs/templates/next-quick-start"}}');var r=t(4848),a=t(8453);const i={},l="\u26a1 Template 3 \u2013 Vite + React + C# FastEndpoints + PostgreSQL",c={},o=[{value:"\ud83e\uddf0 Tech Stack",id:"-tech-stack",level:2},{value:"\u2705 Step 1: Frontend \u2013 Create Vite + Tailwind App",id:"-step-1-frontend--create-vite--tailwind-app",level:2},{value:"Configure Tailwind",id:"configure-tailwind",level:3},{value:"\u2705 Step 2: Add Contact Form",id:"-step-2-add-contact-form",level:2},{value:"\u2705 Step 3: Backend \u2013 Setup FastEndpoints API",id:"-step-3-backend--setup-fastendpoints-api",level:2},{value:"Create a new .NET project",id:"create-a-new-net-project",level:3},{value:"Configure Entity",id:"configure-entity",level:3},{value:"Add Endpoint",id:"add-endpoint",level:3},{value:"Configure Program.cs",id:"configure-programcs",level:3},{value:"\u2705 Step 4: Run the Fullstack App",id:"-step-4-run-the-fullstack-app",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-template-3--vite--react--c-fastendpoints--postgresql",children:"\u26a1 Template 3 \u2013 Vite + React + C# FastEndpoints + PostgreSQL"})}),"\n",(0,r.jsx)(n.p,{children:"This fullstack template sets up a modern Vite frontend and a C# FastEndpoints backend with PostgreSQL and Entity Framework."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-tech-stack",children:"\ud83e\uddf0 Tech Stack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Frontend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vite + React + TypeScript"}),"\n",(0,r.jsx)(n.li,{children:"Tailwind CSS v4"}),"\n",(0,r.jsx)(n.li,{children:"react-hook-form"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:".NET 8"}),"\n",(0,r.jsx)(n.li,{children:"FastEndpoints"}),"\n",(0,r.jsx)(n.li,{children:"Entity Framework Core"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-1-frontend--create-vite--tailwind-app",children:"\u2705 Step 1: Frontend \u2013 Create Vite + Tailwind App"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest hanalei-vite-app -- --template react-ts\ncd hanalei-vite-app\nnpm install\nnpm install -D tailwindcss @tailwindcss/vite\nnpx tailwindcss init -p\n"})}),"\n",(0,r.jsx)(n.h3,{id:"configure-tailwind",children:"Configure Tailwind"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"vite.config.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\n\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"src/index.css"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:'@import "tailwindcss";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Ensure it's imported in ",(0,r.jsx)(n.code,{children:"main.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import './index.css';\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-2-add-contact-form",children:"\u2705 Step 2: Add Contact Form"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"src/pages/Contact.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'\'use client\';\nimport { useForm } from \'react-hook-form\';\n\nexport default function Contact() {\n  const { register, handleSubmit, reset } = useForm();\n\n  const onSubmit = async (data: any) => {\n    const res = await fetch(\'https://localhost:5001/api/messages\', {\n      method: \'POST\',\n      headers: { \'Content-Type\': \'application/json\' },\n      body: JSON.stringify(data),\n    });\n\n    if (res.ok) {\n      alert("Message sent!");\n      reset();\n    } else {\n      alert("Error submitting form.");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className="max-w-md mx-auto p-6">\n      <input {...register("name", { required: true })} placeholder="Name" className="block w-full border p-2 mb-4" />\n      <input {...register("email", { required: true })} placeholder="Email" className="block w-full border p-2 mb-4" />\n      <textarea {...register("message", { required: true })} placeholder="Message" className="block w-full border p-2 mb-4" />\n      <button type="submit" className="bg-blue-600 text-white px-4 py-2">Send</button>\n    </form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-3-backend--setup-fastendpoints-api",children:"\u2705 Step 3: Backend \u2013 Setup FastEndpoints API"}),"\n",(0,r.jsx)(n.h3,{id:"create-a-new-net-project",children:"Create a new .NET project"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet new web -n HanaleiApi\ncd HanaleiApi\ndotnet add package FastEndpoints\ndotnet add package Npgsql.EntityFrameworkCore.PostgreSQL\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"configure-entity",children:"Configure Entity"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Models/Message.cs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class Message {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Body { get; set; }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Db/AppDbContext.cs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.EntityFrameworkCore;\n\npublic class AppDbContext : DbContext {\n    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }\n    public DbSet<Message> Messages => Set<Message>();\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"add-endpoint",children:"Add Endpoint"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Endpoints/CreateMessage.cs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using FastEndpoints;\n\npublic class CreateMessageEndpoint : Endpoint<Message> {\n    public AppDbContext Db { get; set; }\n\n    public override void Configure() {\n        Post("/api/messages");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(Message req, CancellationToken ct) {\n        Db.Messages.Add(req);\n        await Db.SaveChangesAsync(ct);\n        await SendAsync(req);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"configure-programcs",children:"Configure Program.cs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDbContext<AppDbContext>(o =>\n    o.UseNpgsql(builder.Configuration.GetConnectionString("Default")));\nbuilder.Services.AddFastEndpoints();\n\nvar app = builder.Build();\napp.UseFastEndpoints();\napp.Run();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"appsettings.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "ConnectionStrings": {\n    "Default": "Host=localhost;Port=5432;Username=postgres;Password=yourpassword;Database=hanalei"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-4-run-the-fullstack-app",children:"\u2705 Step 4: Run the Fullstack App"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Run the API:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Run the Vite frontend:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"You're done! Messages submitted in the form are stored in PostgreSQL using FastEndpoints and EF Core."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);